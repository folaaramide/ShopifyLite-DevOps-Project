pipeline {
    agent any
    tools {
        jdk 'jdk 17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/k21academyuk/Amazon-app-Deployment-using-terraform-and-jenkins'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Amazon \
                    -Dsonar.projectKey=Amazon'''
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'jenkins'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }
        stage('OWASP FS Scan') {
            steps {
                script {
                    try {
                        dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                        dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                    } catch (err) {
                        echo "Dependency-Check failed. Skipping to continue pipeline. Error: ${err}"
                    }
                }
            }
        }
        stage('TRIVY FS Scan') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
        stage('Docker Build & Push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh "docker build -t amazon-clone ."
                        sh "docker tag amazon-clone aaramide/amazon-clone:latest"
                        sh "docker push aaramide/amazon-clone:latest"
                    }
                }
            }
        }
        stage('TRIVY Image Scan') {
            steps {
                sh "trivy image aaramide/amazon-clone:latest > trivyimage.txt"
            }
        }
        stage('Deploy to Container') {
            steps {
                script {
                    // Stop and remove previous container if it exists
                    sh '''
                    if [ $(docker ps -a -q -f name=amazon-clone) ]; then
                        docker stop amazon-clone
                        docker rm amazon-clone
                    fi
                    docker run -d --name amazon-clone -p 3000:3000 aaramide/amazon-clone:latest
                    '''
                }
            }
        }
    }
}
